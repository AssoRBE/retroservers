generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id                Int       @id @default(autoincrement())
  parc              String    @unique
  type              String
  modele            String
  marque            String?
  subtitle          String?
  immat             String?
  etat              String
  miseEnCirculation DateTime?
  energie           String?
  description       String?
  history           String?
  caracteristiques  String?
  gallery           String?
  backgroundImage   String?      // <- NEW
  backgroundPosition String?     // <- NEW (ex: "50% 50%")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  usages  Usage[]  @relation("VehicleUsages")
  reports Report[] @relation("VehicleReports")
}

model Usage {
  id           Int       @id @default(autoincrement())
  parc         String
  startedAt    DateTime
  endedAt      DateTime?
  conducteur   String?
  participants String?
  note         String?
  relatedTo    Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relation vers Vehicle via le champ parc
  vehicle Vehicle @relation("VehicleUsages", fields: [parc], references: [parc])
}

model Report {
  id          Int      @id @default(autoincrement())
  parc        String
  description String?
  usageId     Int?
  filesMeta   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation vers Vehicle via le champ parc
  vehicle Vehicle @relation("VehicleReports", fields: [parc], references: [parc])
}

model Flash {
  id        String   @id @default(cuid())
  message   String
  category  String   @default("INFO") // INFO, NOTIF, POS
  active    Boolean  @default(true)
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Event {
  id           String      @id           // slug lisible: halloween2025
  title        String
  date         DateTime
  time         String?
  location     String?
  description  String?
  helloAssoUrl String?
  adultPrice   Float?      // Changé de Int à Float pour les centimes
  childPrice   Float?      // Changé de Int à Float pour les centimes
  vehicleId    String?     // Ajout du champ véhicule
  layout       String?     // variante future d'affichage (ex: "hero-poster", "simple")
  extras       String?     // JSON extensible (programme, mentions légales, etc.)
  status       EventStatus @default(PUBLISHED)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([date])
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  status    String   @default("CONFIRMED") // CONFIRMED | PENDING | UNSUB
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
