generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id                Int       @id @default(autoincrement())
  parc              String    @unique
  type              String
  modele            String
  marque            String?
  subtitle          String?
  immat             String?
  etat              String
  miseEnCirculation DateTime?
  energie           String?
  description       String?
  history           String?
  caracteristiques  String?
  gallery           String?
  backgroundImage   String?      // <- NEW
  backgroundPosition String?     // <- NEW (ex: "50% 50%")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  usages  Usage[]  @relation("VehicleUsages")
  reports Report[] @relation("VehicleReports")
}

model Usage {
  id           Int       @id @default(autoincrement())
  parc         String
  startedAt    DateTime
  endedAt      DateTime?
  conducteur   String?
  participants String?
  note         String?
  relatedTo    Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relation vers Vehicle via le champ parc
  vehicle Vehicle @relation("VehicleUsages", fields: [parc], references: [parc])
}

model Report {
  id          Int      @id @default(autoincrement())
  parc        String
  description String?
  usageId     Int?
  filesMeta   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation vers Vehicle via le champ parc
  vehicle Vehicle @relation("VehicleReports", fields: [parc], references: [parc])
}

model Flash {
  id        String   @id @default(cuid())
  message   String
  category  String   @default("INFO") // INFO, NOTIF, POS
  active    Boolean  @default(true)
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Event {
  id           String      @id           // slug lisible: halloween2025
  title        String
  date         DateTime
  time         String?
  location     String?
  description  String?
  helloAssoUrl String?
  adultPrice   Float?      // Changé de Int à Float pour les centimes
  childPrice   Float?      // Changé de Int à Float pour les centimes
  vehicleId    String?     // Ajout du champ véhicule
  layout       String?     // variante future d'affichage (ex: "hero-poster", "simple")
  extras       String?     // JSON extensible (programme, mentions légales, etc.)
  status       EventStatus @default(PUBLISHED)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([date])
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  status    String   @default("CONFIRMED") // CONFIRMED | PENDING | UNSUB
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  campaigns NewsletterCampaignSend[]
}

model NewsletterCampaign {
  id          String   @id @default(cuid())
  title       String
  subject     String
  content     String   // HTML content
  status      String   @default("DRAFT") // DRAFT, SCHEDULED, SENDING, SENT, CANCELLED
  scheduledAt DateTime?
  sentAt      DateTime?
  createdBy   String   // User who created the campaign
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Statistics
  totalSent     Int @default(0)
  totalOpened   Int @default(0)
  totalClicked  Int @default(0)
  totalBounced  Int @default(0)
  
  // Relations
  sends NewsletterCampaignSend[]
  
  @@index([status])
  @@index([createdAt])
}

model NewsletterCampaignSend {
  id           String   @id @default(cuid())
  campaignId   String
  subscriberId String
  email        String
  status       String   @default("PENDING") // PENDING, SENT, FAILED, OPENED, CLICKED, BOUNCED
  sentAt       DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  errorMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  campaign   NewsletterCampaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  subscriber NewsletterSubscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, subscriberId])
  @@index([campaignId])
  @@index([subscriberId])
  @@index([status])
}

model EventRegistration {
  id                String   @id @default(cuid())
  eventId           String
  participantName   String
  participantEmail  String
  helloAssoOrderId  String?  // ID de commande HelloAsso
  helloAssoStatus   String?  // PENDING, VALIDATED, CANCELLED
  adultTickets      Int      @default(0)
  childTickets      Int      @default(0)
  totalAmount       Float?
  paymentMethod     String   // "helloasso", "internal", "free"
  registrationDate  DateTime @default(now())
  ticketSent        Boolean  @default(false)
  qrCodeData        String?  // JSON du QR code
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([eventId])
  @@index([participantEmail])
  @@index([helloAssoOrderId])
}

model Member {
  id                String   @id @default(cuid())
  memberNumber      String   @unique // Numéro d'adhérent (ex: 2025-001)
  firstName         String
  lastName          String
  email             String   @unique
  phone             String?
  address           String?
  city              String?
  postalCode        String?
  birthDate         DateTime?
  membershipType    MembershipType @default(STANDARD)
  membershipStatus  MembershipStatus @default(PENDING)
  joinDate          DateTime @default(now())
  renewalDate       DateTime
  lastPaymentDate   DateTime?
  paymentAmount     Float?
  paymentMethod     String? // "cash", "check", "transfer", "helloasso"
  
  // Rôle et permissions
  role              MemberRole @default(MEMBER)
  
  // Accès aux sites
  hasExternalAccess Boolean  @default(false) // Accès site externe (newsletter, etc.)
  hasInternalAccess Boolean  @default(false) // Accès MyRBE
  internalPassword  String?  // Hash du mot de passe pour MyRBE
  
  // Informations spécifiques aux conducteurs
  driverLicense            String?    // Type de permis (B, C, D, SPECIAL)
  licenseExpiryDate        DateTime?  // Date d'expiration du permis
  medicalCertificateDate   DateTime?  // Date de la visite médicale
  emergencyContact         String?    // Contact d'urgence
  emergencyPhone           String?    // Téléphone d'urgence
  driverCertifications     String[]   // Certifications obtenues
  vehicleAuthorizations    String[]   // Véhicules autorisés (parcs)
  maxPassengers            Int?       // Nombre max de passagers autorisé
  driverNotes              String?    // Notes spécifiques conducteur
  
  // Préférences
  newsletter        Boolean  @default(true)
  notifications     Boolean  @default(true)
  
  // Métadonnées
  notes             String?  // Notes administratives
  createdBy         String?  // Qui a créé le membre
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  documents         MemberDocument[] @relation("MemberDocuments")
  passwordResets    PasswordReset[]  @relation("MemberPasswordResets")
  
  @@index([memberNumber])
  @@index([email])
  @@index([membershipStatus])
  @@index([renewalDate])
  @@index([role])
  @@index([licenseExpiryDate])
}

model MemberDocument {
  id            String         @id @default(cuid())
  memberId      String
  documentType  DocumentType
  fileName      String         // Nom original du fichier
  filePath      String         // Chemin de stockage
  fileSize      Int            // Taille en octets
  mimeType      String         // Type MIME du fichier
  uploadedAt    DateTime       @default(now())
  expiryDate    DateTime?      // Date d'expiration (pour permis, CNI)
  status        DocumentStatus @default(PENDING)
  notes         String?        // Notes administratives
  uploadedBy    String?        // Qui a uploadé le document
  
  // Relation
  member        Member         @relation("MemberDocuments", fields: [memberId], references: [id], onDelete: Cascade)
  
  @@index([memberId])
  @@index([documentType])
  @@index([status])
  @@index([expiryDate])
}

model PasswordReset {
  id        String   @id @default(cuid())
  memberId  String
  token     String   @unique // Token de réinitialisation
  expiresAt DateTime // Expiration du token (24h)
  usedAt    DateTime? // Date d'utilisation du token
  createdAt DateTime @default(now())
  requestedBy String? // Qui a demandé la réinitialisation
  
  // Relation
  member    Member   @relation("MemberPasswordResets", fields: [memberId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([memberId])
  @@index([expiresAt])
}

enum MembershipType {
  STANDARD    // Adhésion standard
  FAMILY      // Adhésion famille
  STUDENT     // Adhésion étudiant
  HONORARY    // Membre d'honneur
  LIFETIME    // Adhésion à vie
}

enum MembershipStatus {
  PENDING     // En attente de validation
  ACTIVE      // Adhésion active
  EXPIRED     // Adhésion expirée
  SUSPENDED   // Suspendu
  CANCELLED   // Annulé
}

enum MemberRole {
  MEMBER      // Adhérent simple
  DRIVER      // Conducteur habilité
  ADMIN       // Administrateur système
  BUREAU      // Membre du bureau
}

enum DocumentType {
  DRIVING_LICENSE     // Permis de conduire
  IDENTITY_CARD       // Carte d'identité
  INSURANCE_RECORD    // Relevé d'informations d'assurance
  MEMBERSHIP_FORM     // Bulletin d'adhésion
  MEDICAL_CERTIFICATE // Certificat médical
  OTHER               // Autre document
}

enum DocumentStatus {
  PENDING     // En attente de validation
  APPROVED    // Validé
  REJECTED    // Rejeté
  EXPIRED     // Expiré
}
